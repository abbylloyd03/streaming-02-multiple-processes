In the console, type clear and hit Enter or Return. 

This will clear the console output. 

Run the file once while the tasks are short. 

Copy and paste the terminal results (when task_duration is 0) here.

(base) Abby@Abbys-Air streaming-02-multiple-processes % /usr/bin/python3 "/Users/Abby/Documents/44-671 Streaming Data/Module 2/strea
ming-02-multiple-processes/multiple_processes.py"


STARTING UP.............................
It's 2023-01-14 at 09:53 AM

This file is running on:    posix Darwin 21.6.0
The Python version is:      3.9.6
 
The Python interpreter is at: 
 /Library/Developer/CommandLineTools/usr/bin/python3


DELETED tabble pets.
CREATED table pets.

P2 getting ready to insert Cooper the Rabbit.
P2 ADDED Cooper the Rabbit.
P2 getting ready to insert Dufus the Dog.
P2 ADDED Dufus the Dog.
P1 getting ready to insert Ace the Dog.
P1 ADDED Ace the Dog.
P3 getting ready to insert Emma the Rabbit.
P3 ADDED Emma the Rabbit.
P3 getting ready to insert Felix the Cat.
P3 ADDED Felix the Cat.
P1 getting ready to insert Buddy the Dog.
P1 ADDED Buddy the Dog.

SUCCESS! All processes are done.
Now - increase the task duration (representing 
      the time the task has the database 
      tied up during an insert statement).

NOTES
How well do the multiple, concurrent processes share a database 
when each task can take more time?

ANSWER: When each task was assigned more time it locked up the database. 

How can we let multiple processes share a resource
without interfering with each other?

ANSWER: Mutexes, semaphores, and condition variables can be used 
when implementing multiprogramming. 